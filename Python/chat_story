from langchain.text_splitter import CharacterTextSplitter
from langchain.embeddings import OpenAIEmbeddings
from langchain.vectorstores import FAISS
from langchain.chat_models import ChatOpenAI
from langchain.memory import ConversationBufferMemory
from langchain.chains import ConversationalRetrievalChain
import os

os.environ["OPENAI_API_KEY"] = "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"

def get_raw_text(file_path):
    with open(file_path, "r") as f:
        text = f.read()
    return text

def get_text_chunks(text):
    text_splitter = CharacterTextSplitter(
        separator="\n",
        chunk_size=1000,
        chunk_overlap=200,
        length_function=len
    )
    chunks = text_splitter.split_text(text)
    return chunks

def get_vectorstore(text_chunks):
    embeddings = OpenAIEmbeddings()
    vectorstore = FAISS.from_texts(texts=text_chunks, embedding=embeddings)
    return vectorstore

def get_conversation_chain(vectorstore):
    llm = ChatOpenAI()

    memory = ConversationBufferMemory(
        memory_key='chat_history', return_messages=True)
    conversation_chain = ConversationalRetrievalChain.from_llm(
        llm=llm,
        retriever=vectorstore.as_retriever(),
        memory=memory
    )
    return conversation_chain
  
def get_answer(conversation, question):
    response = conversation({"question": question})
    message = f"question: {question}\nanswer: {response['chat_history'][1].content}"
    print(message)

file_path = "/home/chat_pdf/jane-austen-pride-prejudice.txt"
raw_text = get_raw_text(file_path)
text_chunks = get_text_chunks(raw_text)
vectorstore = get_vectorstore(text_chunks[:500])
conversation = get_conversation_chain(vectorstore)
get_answer(conversation, "总结一下这本书的内容，并将总结的内容翻译成中文描述")
