from collections import defaultdict

class TrieNode(object):
    def __init__(self):
        self.children = defaultdict(TrieNode)
        self.word_end = False

class Trie(object):

    def __init__(self):
        self.root = TrieNode()

    def insert(self, word):
        node = self.root
        for w in word:
            node = node.children[w]
        node.word_end = True

    def start_with(self, prefix):
        node = self.root
        for p in prefix:
            if p not in node.children:
                return False
            node = node.children[p]
        return True

class Solution(object):
    def minimumLengthEncoding(self, words):
        """
        :type words: List[str]
        :rtype: int
        """
        words = sorted(words, reverse=True, key=len)
        count = 0
        trie = Trie()
        for word in words:
            if not trie.start_with(word[::-1]):
                count += len(word) + 1
                trie.insert(word[::-1])
        return count
# runtime:316 ms
# memory:17.4 MB
